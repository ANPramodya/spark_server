// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String   @id @default(uuid())
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  username           String   @unique
  email              String   @unique
  uniEmail           String   @unique
  firstName          String
  lastName           String
  address            String?
  contactnumber      String?
  degreeProgram      String?
  schoolLastAttended String?

  online Boolean @default(false)

  socialLinks    SocialLink[]
  workExperience WorkExperience[]
  skills         Skill[]
  projects       Project[]
  interests      Interest[]
  achievements   Achievement[]
  sports         Sport[]

  posts    Post[]
  comments Comment[]
  groups   UserGroup[]
  replies  Reply[]
}

model SocialLink {
  id     String @id @default(uuid())
  type   String
  url    String
  user   User   @relation(fields: [userId], references: [id])
  userId String
}

model WorkExperience {
  id        String    @id @default(uuid())
  company   String
  position  String
  startDate DateTime
  endDate   DateTime?
  user      User      @relation(fields: [userId], references: [id])
  userId    String
}

model Skill {
  id     String @id @default(uuid())
  name   String
  user   User   @relation(fields: [userId], references: [id])
  userId String
}

model Project {
  id          String  @id @default(uuid())
  name        String
  description String?
  user        User    @relation(fields: [userId], references: [id])
  userId      String
}

model Interest {
  id     String @id @default(uuid())
  name   String
  user   User   @relation(fields: [userId], references: [id])
  userId String
}

model Achievement {
  id          String  @id @default(uuid())
  title       String
  description String?
  user        User    @relation(fields: [userId], references: [id])
  userId      String
}

model Sport {
  id     String @id @default(uuid())
  name   String
  user   User   @relation(fields: [userId], references: [id])
  userId String
}

model Post {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  title     String
  content   String?
  imageUrl  String?

  author   User?   @relation(fields: [authorId], references: [id])
  authorId String?

  group   UserGroup? @relation(fields: [groupId], references: [id])
  groupId String?

  comments Comment[]
}

model Comment {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  text      String

  author   User   @relation(fields: [authorId], references: [id])
  authorId String

  post   Post   @relation(fields: [postId], references: [id])
  postId String

  replies Reply[]
}

model UserGroup {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  name        String
  description String?
  iconUrl     String?

  users User[]
  Post  Post[]
}

model Reply {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  text      String

  author   User   @relation(fields: [authorId], references: [id])
  authorId String

  comment   Comment @relation(fields: [commentId], references: [id])
  commentId String
}
